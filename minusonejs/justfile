root_dir := source_dir()
pkg_name := "minusone"
cargo_name := "minusonejs"
sdk_url := "https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-27/wasi-sdk-27.0-x86_64-linux.tar.gz"
sdk_path := root_dir / "target/wasi-sdk-27.0-x86_64-linux"
target_build_dir := root_dir / "target/wasm32-wasip2/release"
target_pkg_dir := root_dir / "target" / pkg_name
target_serve_dir := root_dir / "tests/www/"

export RUSTFLAGS := "-L " + sdk_path + "/share/wasi-sysroot/lib/wasm32-wasip2"
export CXXSTDLIB := "c++"
export CC := sdk_path + "/bin/clang"
export CXX := sdk_path + "/bin/clang++"
export CFLAGS := "-Wno-everything"
export CXXFLAGS := "-fno-exceptions"

build: init build_wasip2 transpile
build_browser: init build_wasip2 (transpile (target_serve_dir) "")

publish: build
    cd {{ target_pkg_dir }} && npm publish --access=public

serve: build_browser
    cd {{ target_serve_dir }} && just serve

init:
    #!/usr/bin/env bash
    set -euxo pipefail
    if [ ! -d {{ sdk_path }} ]
    then
        echo "Downloading WASI SDK..."
        mkdir -p {{ root_dir }}/target
        wget --output-document {{ root_dir }}/target/wasi-sdk-27.0-x86_64-linux.tar.gz {{ sdk_url }}
        tar xvf {{ root_dir }}/target/wasi-sdk-27.0-x86_64-linux.tar.gz --directory {{ root_dir }}/target/
    fi

build_wasip2: init
    cargo component build --release --target=wasm32-wasip2

transpile dir=(target_pkg_dir) flags="-Om": init
    npx @bytecodealliance/jco transpile {{ target_build_dir }}/{{ cargo_name }}.wasm \
        -o {{ dir }} --name {{ pkg_name }} --no-nodejs-compat --base64-cutoff $((10**7)) {{ flags }}
    cp {{ root_dir }}/package.json {{ dir }}/
    cd {{ dir }} && npm i

clean:
    -cargo clean
    -rm -r {{ root_dir }}/target/

clean_js:
    -rm -r {{ target_pkg_dir }}
    -git clean -fXd {{ target_serve_dir }}
